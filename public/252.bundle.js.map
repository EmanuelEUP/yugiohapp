{"version":3,"sources":["webpack://yugiohapp/./src/constants/index.js","webpack://yugiohapp/./src/context/CardsContext.js"],"names":["base_url","_ALLCARDS_FILTER","CardsContext","createContext","children","useState","doneFetchCards","setDoneFetchCards","cards","setCards","handleErrors","response","ok","json","Error","status","statusText","url","useEffect","getCards","fetch","then","res","data","catch","error","console","log","Provider","value","validateQCard","e","q_card","target","toLowerCase","trim","type","key","preventDefault","card_name","getSearchedCards","getCardsFilter","filter","sort","sortorder","num","offset","language","GET_ALLCARDS_FILTER"],"mappings":"wMAIMA,EAAW,gDAIXC,EAAmB,GAAH,OAAOD,EAAP,gD,k7BCDf,IAAME,GAAeC,qBAyF5B,EAvF6B,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SAAe,KACDC,eAAS,GADR,GACtCC,EADsC,KACtBC,EADsB,UAEnBF,eAAS,GAFU,GAEtCG,EAFsC,KAE/BC,EAF+B,KAQ7C,SAASC,EAAaC,GACpB,GAAKA,EAASC,GAUZ,OAAOD,EAASE,OAThB,MAAMC,MACJ,UACEH,EAASI,OACT,MACAJ,EAASK,WACT,IACAL,EAASM,MAXjBC,gBAAU,kBAAMC,MAAY,IAmB5B,IAAMA,EAAW,WACfC,MDrBqC,UAAUnB,ICsB5CoB,MAAK,SAACC,GAAD,OAASA,EAAIT,UAClBQ,MAAK,SAACE,GACLhB,GAAkB,GAClBE,EAASc,EAAKA,SAEfC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,OA+ClC,OACE,gBAACvB,EAAa0B,SAAd,CACEC,MAAO,CAAEvB,iBAAgBE,QAAOsB,cArBd,SAACC,GACrB,IACE,IAAIC,EAASD,EAAEE,OAAOJ,MAAMK,cAAcC,OAE3B,aAAXJ,EAAEK,MAAiC,UAAVL,EAAEM,MAC7BN,EAAEO,iBAEEN,GACFzB,GAAkB,GAvBD,SAACyB,GDrCS,IAAAO,ECsCjCnB,ODtCiCmB,ECsCLP,EDtCc,UAAQhC,EAAR,iBAA0BuC,KCuCjElB,KAAKX,GACLW,MAAK,SAACE,GACDA,EAAI,OACNhB,GAAkB,GAClBE,EAAS,QAETF,GAAkB,GAClBE,EAASc,EAAKA,UAGjBC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,MAY1Be,CAAiBR,IAEjBb,KAGJ,MAAOM,GACPC,QAAQD,MAAMA,KAMiCgB,eA9C5B,SAACC,GACtBtB,MD9B+B,SAAAsB,GAAM,gBAAQ1C,EAAR,YAAoC,UAAf0C,EAAOC,KAAmB,GAAI,SAAWD,EAAOC,KAArE,sBAAwFD,EAAOE,UAA/F,gBAAgHF,EAAOG,IAAvH,mBAAqIH,EAAOI,QAA5I,OAAwK,MAAnBJ,EAAOK,SAAmB,GAAI,aAAeL,EAAOK,SAAzM,iBC8B/BC,CAAoBN,IACvBrB,MAAK,SAACC,GAAD,OAASA,EAAIT,UAClBQ,MAAK,SAACE,GACLhB,GAAkB,GAClBE,EAASc,EAAKA,SAEfC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,SAyC7BrB","file":"252.bundle.js","sourcesContent":["// CORS\nconst cors_anywhere = 'https://cors-anywhere.herokuapp.com/';\n\n//Base URL\nconst base_url = \"https://db.ygoprodeck.com/api/v7/cardinfo.php\";\n \n//GET ALL CARDS\nconst _ALLCARDS = base_url;\nconst _ALLCARDS_FILTER = `${ base_url }?&sortorder=asc&num=30&offset=0&view=Gallery`; \n\n\n//Routes\nexport const GET_ALLCARDS = () => `${ _ALLCARDS }`;\nexport const GET_ALLCARDS_FILTER_BASIC = () => `${ _ALLCARDS_FILTER }`;\nexport const GET_ALLCARDS_FILTER = filter => `${ base_url }?${filter.sort == \"nosort\" ? \"\": \"&sort=\" + filter.sort }&sortorder=${filter.sortorder}&num=${filter.num}&offset=${filter.offset}${filter.language == \"en\" ? \"\": \"&language=\" + filter.language }&view=Gallery`;\n\nexport const GET_SEARCHBYNAME_CARD = card_name => `${ base_url }?name=${card_name}`;\n\n","import React, { createContext, useState, useEffect } from \"react\";\nimport {\n  GET_ALLCARDS_FILTER,\n  GET_ALLCARDS_FILTER_BASIC,\n  GET_SEARCHBYNAME_CARD,\n} from \"../constants\";\n\nexport const CardsContext = createContext();\n\nconst CardsContextProvider = ({ children }) => {\n  const [doneFetchCards, setDoneFetchCards] = useState(false);\n  const [cards, setCards] = useState(false);\n\n  //Life Cycle\n  useEffect(() => getCards(), []);\n  //useEffect(() => getCardsFilter(), []);\n\n  function handleErrors(response) {\n    if (!response.ok) {\n      throw Error(\n        \"Error: \" +\n          response.status +\n          \" : \" +\n          response.statusText +\n          \" \" +\n          response.url\n      ); // response.statusText\n    }else{\n      return response.json();\n    }\n  }\n\n  //Fetch\n  const getCards = () => {\n    fetch(GET_ALLCARDS_FILTER_BASIC())\n      .then((res) => res.json())\n      .then((data) => {\n        setDoneFetchCards(true);\n        setCards(data.data);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const getCardsFilter = (filter) => {\n    fetch(GET_ALLCARDS_FILTER(filter))\n      .then((res) => res.json())\n      .then((data) => {\n        setDoneFetchCards(true);\n        setCards(data.data);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const getSearchedCards = (q_card) => {\n    fetch(GET_SEARCHBYNAME_CARD(q_card))\n      .then(handleErrors) \n      .then((data) => {\n        if (data[\"error\"]) {\n          setDoneFetchCards(false);\n          setCards(null);\n        } else {\n          setDoneFetchCards(true);\n          setCards(data.data);\n        }\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const validateQCard = (e) => {\n    try {\n      let q_card = e.target.value.toLowerCase().trim();\n\n      if (e.type === \"keypress\" && e.key === \"Enter\") {\n        e.preventDefault();\n\n        if (q_card) {\n          setDoneFetchCards(false);\n          getSearchedCards(q_card);\n        } else {\n          getCards();\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <CardsContext.Provider\n      value={{ doneFetchCards, cards, validateQCard, getCardsFilter }}\n    >\n      {children}\n    </CardsContext.Provider>\n  );\n};\n\nexport default CardsContextProvider;\n"],"sourceRoot":""}